import os
import argparse
import subprocess
import sys
import time
import requests

# === 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á RunPod ===
RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")

if not RUNPOD_API_KEY:
    print("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ `export RUNPOD_API_KEY=...` –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    sys.exit(1)

# === 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º POD_ID (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è) ===
parser = argparse.ArgumentParser()
parser.add_argument("--pod_id", type=str, help="ID –ø–æ–¥–∞ RunPod (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
args = parser.parse_args()

POD_ID = args.pod_id or os.getenv("POD_ID")

if not POD_ID:
    print("‚ùå POD_ID –Ω–µ –∑–∞–¥–∞–Ω! –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ `--pod_id` –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ `export POD_ID=...`")
    sys.exit(1)

print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è POD_ID: {POD_ID}")

# === 3Ô∏è‚É£ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ===
BASE_LOCAL_DIR = r"C:\Users\Kroha\Documents\Auto-Blogging SaaS\devenv\Trading Bot\New Logic\Divided\3 models with a switcher"
NEURAL_NETWORKS_DIR = os.path.join(BASE_LOCAL_DIR, "Neural_Networks")
ENSEMBLE_MODELS_DIR = os.path.join(BASE_LOCAL_DIR, "Ensemble_Models")

os.makedirs(NEURAL_NETWORKS_DIR, exist_ok=True)
os.makedirs(ENSEMBLE_MODELS_DIR, exist_ok=True)

# === 4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
REQUIRED_PACKAGES = [
    "numpy", "pandas", "matplotlib", "scipy", "tensorflow-addons",
    "scikit-learn", "imbalanced-learn", "xgboost", "catboost", "lightgbm", "joblib",
    "ta", "pandas-ta", "python-binance", "filterpy", "requests"
]

def install_packages():
    print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")

    print("‚úÖ –£–¥–∞–ª—è–µ–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π numpy (–µ—Å–ª–∏ –µ—Å—Ç—å)...")
    subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", "numpy"], check=False)

    print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º numpy 1.23.5 (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å TensorFlow 2.12.0)...")
    subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "numpy==1.23.5"], check=True)

    print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TensorFlow 2.12.0...")
    subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", "tensorflow==2.12.0"], check=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for package in REQUIRED_PACKAGES:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", package], check=True)
        except subprocess.CalledProcessError:
            print(f"‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞: {package}")


install_packages()

# === 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU ===
def check_gpu():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU...")
    try:
        output = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if output.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(output.stdout)
        else:
            print("‚ö† GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –Ω–∞ CPU.")
    except FileNotFoundError:
        print("‚ö† nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

check_gpu()

# === 6Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ===
MODELS_DIR = "/trading-models/neural_networks"
OUTPUT_DIR = "/trading-models/output/neural_networks"

MODELS = {
    "market_condition_classifier.py": "Market_Classifier",
    "bullish_neural_network.py": "Neural_Bullish",
    "bullish_ensemble.py": "Ensemble_Bullish",
    "flat_neural_network.py": "Neural_Flat",
    "flat_ensemble.py": "Ensemble_Flat",
    "bearish_neural_network.py": "Neural_Bearish",
    "bearish_ensemble.py": "Ensemble_Bearish"
}

def train_models():
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    for model_file, model_name in MODELS.items():
        model_path = os.path.join(MODELS_DIR, model_file)
        if os.path.exists(model_path):
            print(f"üü¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_file}")
            try:
                subprocess.run(["python3", model_path], check=True)

                # ‚úÖ –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
                print(f"üì• –ö–æ–ø–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å {model_name} –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É...")

                trained_model_path = os.path.join(OUTPUT_DIR, f"{model_name}.h5")

                if "Ensemble" in model_name:
                    local_model_path = os.path.join(ENSEMBLE_MODELS_DIR, f"{model_name}.h5")
                else:
                    local_model_path = os.path.join(NEURAL_NETWORKS_DIR, f"{model_name}.h5")

                if os.path.exists(trained_model_path):
                    subprocess.run(["cp", trained_model_path, local_model_path])
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {local_model_path}!")
                else:
                    print(f"‚ö† –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

            except subprocess.CalledProcessError:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {model_file}")
        else:
            print(f"‚ö† –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")

train_models()

# === 7Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∞ –≤ RunPod ===
if RUNPOD_API_KEY:
    print("\nüîß –†–∞–±–æ—Ç–∞–µ–º —Å RunPod...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ runpod
    try:
        subprocess.run(["pip", "install", "runpod"], check=True)
    except subprocess.CalledProcessError:
        print("‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ runpod CLI, –ø–æ–¥ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        sys.exit(1)

    try:
        response = requests.get(
            "https://api.runpod.io/v2/pod/list",
            headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
        )
        pods = response.json()
        if "pods" in pods and pods["pods"]:
            POD_ID = pods["pods"][0]["id"]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥ —Å ID: {POD_ID}")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥
            requests.post(
                f"https://api.runpod.io/v2/pod/{POD_ID}/stop",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

            # –£–¥–∞–ª—è–µ–º –ø–æ–¥
            requests.delete(
                f"https://api.runpod.io/v2/pod/{POD_ID}",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} —É–¥–∞–ª—ë–Ω.")
        else:
            print("‚ö† –ü–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ RunPod: {e}")

print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å–∫–∞—á–∞–Ω—ã, –ø–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
