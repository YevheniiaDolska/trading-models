import os
import subprocess
import sys
import argparse
import requests

# === 1Ô∏è‚É£ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")
GIT_REPO = "git@github.com:YevheniiaDolska/tr.git"  # –¢–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
BASE_DIR = "/workspace/tr"  # –ü–∞–ø–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –∫–ª–æ–Ω–∏—Ä—É–µ—Ç—Å—è –∫–æ–¥

if not RUNPOD_API_KEY:
    print("‚ùå API-–∫–ª—é—á RunPod –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    sys.exit(1)

# === 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º POD_ID ===
parser = argparse.ArgumentParser()
parser.add_argument("--pod_id", type=str, help="ID –ø–æ–¥–∞ RunPod (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
args = parser.parse_args()
POD_ID = args.pod_id or os.getenv("POD_ID")

if not POD_ID:
    print("‚ùå POD_ID –Ω–µ –∑–∞–¥–∞–Ω! –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ `--pod_id` –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ `export POD_ID=...`")
    sys.exit(1)

print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è POD_ID: {POD_ID}")

# === 3Ô∏è‚É£ –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ===
if not os.path.exists(BASE_DIR):
    print("üöÄ –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    subprocess.run(["git", "clone", GIT_REPO, BASE_DIR], check=True)
else:
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    subprocess.run(["git", "-C", BASE_DIR, "pull"], check=True)

# === 4Ô∏è‚É£ –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º ===
NEURAL_NETWORKS_DIR = os.path.join(BASE_DIR, "neural_networks")
ENSEMBLE_MODELS_DIR = os.path.join(BASE_DIR, "ensemble_models")

# === 5Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
REQUIRED_PACKAGES = [
    "numpy", "pandas", "matplotlib", "scipy", "tensorflow-addons",
    "scikit-learn", "imbalanced-learn", "xgboost", "catboost", "lightgbm", "joblib",
    "ta", "pandas-ta", "python-binance", "filterpy", "requests"
]

def install_packages():
    print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir"] + REQUIRED_PACKAGES, check=True)

install_packages()

# === 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU ===
def check_gpu():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU...")
    try:
        output = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if output.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(output.stdout)
        else:
            print("‚ö† GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –Ω–∞ CPU.")
    except FileNotFoundError:
        print("‚ö† nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

check_gpu()

# === 7Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ ===
MODELS = {
    "market_condition_classifier.py": "Market_Classifier",
    "bullish_neural_network.py": "Neural_Bullish",
    "bullish_ensemble.py": "Ensemble_Bullish",
    "flat_neural_network.py": "Neural_Flat",
    "flat_ensemble.py": "Ensemble_Flat",
    "bearish_neural_network.py": "Neural_Bearish",
    "bearish_ensemble.py": "Ensemble_Bearish"
}

def train_models():
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    for model_file, model_name in MODELS.items():
        if "ensemble" in model_file:
            model_path = os.path.join(ENSEMBLE_MODELS_DIR, model_file)
        else:
            model_path = os.path.join(NEURAL_NETWORKS_DIR, model_file)
        
        if os.path.exists(model_path):
            print(f"üü¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_file}")
            try:
                subprocess.run(["python3", model_path], check=True)
            except subprocess.CalledProcessError:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {model_file}")
        else:
            print(f"‚ö† –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")

train_models()

# === 8Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ===
if RUNPOD_API_KEY:
    print("\nüîß –†–∞–±–æ—Ç–∞–µ–º —Å RunPod API...")
    try:
        response = requests.post(
            f"https://api.runpod.io/v2/pod/{POD_ID}/stop",
            headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
        )
        if response.status_code == 200:
            print(f"‚úÖ –ü–æ–¥ {POD_ID} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        response = requests.delete(
            f"https://api.runpod.io/v2/pod/{POD_ID}",
            headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
        )
        if response.status_code == 200:
            print(f"‚úÖ –ü–æ–¥ {POD_ID} —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ RunPod: {e}")

print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
