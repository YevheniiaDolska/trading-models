import os
import subprocess
import sys
import argparse
import requests

# === 1Ô∏è‚É£ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")
GIT_REPO = "https://github.com/YevheniiaDolska/tr.git"
BASE_DIR = "/workspace/tr"
OUTPUT_DIR = "/workspace/tr/output_models"
GOOGLE_DRIVE_FOLDER_ID = "1JCoUN-wQ2iIk5D6DiUoTj9PhS44lTnAp"  # –¢–≤–æ—è –ø–∞–ø–∫–∞ –Ω–∞ Google Drive

# –ü–∞–ø–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
NEURAL_NETWORKS_OUTPUT = os.path.join(OUTPUT_DIR, "Neural_Networks")
ENSEMBLE_MODELS_OUTPUT = os.path.join(OUTPUT_DIR, "Ensemble_Models")

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏
os.makedirs(NEURAL_NETWORKS_OUTPUT, exist_ok=True)
os.makedirs(ENSEMBLE_MODELS_OUTPUT, exist_ok=True)

if not RUNPOD_API_KEY:
    print("‚ùå API-–∫–ª—é—á RunPod –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

# === 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º POD_ID ===
parser = argparse.ArgumentParser()
parser.add_argument("--pod_id", type=str, help="ID –ø–æ–¥–∞ RunPod")
args = parser.parse_args()
POD_ID = args.pod_id or os.getenv("POD_ID")

if not POD_ID:
    print("‚ùå POD_ID –Ω–µ –∑–∞–¥–∞–Ω!")
    sys.exit(1)

print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è POD_ID: {POD_ID}")

# === 3Ô∏è‚É£ –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ===
if not os.path.exists(BASE_DIR):
    print("üöÄ –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    subprocess.run(["git", "clone", GIT_REPO, BASE_DIR], check=True)
else:
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    subprocess.run(["git", "-C", BASE_DIR, "pull"], check=True)

# === 4Ô∏è‚É£ –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º ===
NEURAL_NETWORKS_DIR = os.path.join(BASE_DIR, "neural_networks")
ENSEMBLE_MODELS_DIR = os.path.join(BASE_DIR, "ensemble_models")

# === 5Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
REQUIRED_PACKAGES = [
    "numpy", "pandas", "matplotlib", "scipy", "tensorflow[and-cuda]==2.12.0", "tensorflow-addons",
    "scikit-learn", "imbalanced-learn", "xgboost", "catboost", "lightgbm", "joblib",
    "ta", "pandas-ta", "python-binance", "filterpy", "requests", "gdown"
]

def install_packages():
    print("‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir"] + REQUIRED_PACKAGES, check=True)

install_packages()

# === 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU ===
def check_gpu():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU...")
    try:
        output = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if output.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(output.stdout)
        else:
            print("‚ö† GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –Ω–∞ CPU.")
    except FileNotFoundError:
        print("‚ö† nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

check_gpu()

# === 7Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏ ===
MODELS = {
    "market_condition_classifier.py": "Market_Classifier",
    "bullish_neural_network.py": "Neural_Bullish",
    "bullish_ensemble.py": "Ensemble_Bullish",
    "flat_neural_network.py": "Neural_Flat",
    "flat_ensemble.py": "Ensemble_Flat",
    "bearish_neural_network.py": "Neural_Bearish",
    "bearish_ensemble.py": "Ensemble_Bearish"
}

def train_models():
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    for model_file, model_name in MODELS.items():
        if "ensemble" in model_file:
            model_path = os.path.join(ENSEMBLE_MODELS_DIR, model_file)
            save_path = os.path.join(ENSEMBLE_MODELS_OUTPUT, f"{model_name}.h5")
        else:
            model_path = os.path.join(NEURAL_NETWORKS_DIR, model_file)
            save_path = os.path.join(NEURAL_NETWORKS_OUTPUT, f"{model_name}.h5")

        if os.path.exists(model_path):
            print(f"üü¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_file}")
            try:
                subprocess.run(["python3", model_path], check=True)

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                if os.path.exists(save_path):
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {save_path}!")
                else:
                    print(f"‚ö† –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è!")

            except subprocess.CalledProcessError:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {model_file}")
        else:
            print(f"‚ö† –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")

train_models()

# === 8Ô∏è‚É£ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ ===
print("\nüì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è Google Drive...")
subprocess.run(["zip", "-r", "/workspace/neural_networks.zip", NEURAL_NETWORKS_OUTPUT], check=True)
subprocess.run(["zip", "-r", "/workspace/ensemble_models.zip", ENSEMBLE_MODELS_OUTPUT], check=True)
print("‚úÖ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# === 9Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ ===
def upload_to_drive(file_path, folder_name):
    print(f"\nüöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º {file_path} –≤ –ø–∞–ø–∫—É {folder_name} –Ω–∞ Google Drive...")
    subprocess.run([
        "gdown", "--folder", "--id", GOOGLE_DRIVE_FOLDER_ID, file_path
    ], check=True)
    print(f"‚úÖ –§–∞–π–ª {file_path} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {folder_name} –Ω–∞ Google Drive!")

upload_to_drive("/workspace/neural_networks.zip", "Neural_Networks")
upload_to_drive("/workspace/ensemble_models.zip", "Ensemble_Models")

# === üîü –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥ ===
if RUNPOD_API_KEY:
    print("\nüîß –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–¥ RunPod...")
    try:
        requests.post(f"https://api.runpod.io/v2/pod/{POD_ID}/stop", headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"})
        requests.delete(f"https://api.runpod.io/v2/pod/{POD_ID}", headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"})
        print(f"‚úÖ –ü–æ–¥ {POD_ID} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ RunPod: {e}")

print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –§–∞–π–ª—ã `neural_networks.zip` –∏ `ensemble_models.zip` –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Drive.")
