import os
import subprocess
import sys
import time
import requests

# === 1Ô∏è‚É£ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú API-–ö–õ–Æ–ß (–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ Jupyter Notebook) ===
#os.environ["RUNPOD_API_KEY"] = "—Ç–≤–æ–π_–∫–ª—é—á"  # ‚ö†Ô∏è –ù–ï –•–†–ê–ù–ò API-–ö–õ–Æ–ß –í –§–ê–ô–õ–ï –ü–£–ë–õ–ò–ß–ù–û!

RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")

if not RUNPOD_API_KEY:
    print("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    sys.exit(1)

# === 2Ô∏è‚É£ –õ–û–ö–ê–õ–¨–ù–´–ï –ü–ê–ü–ö–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø ===
BASE_LOCAL_DIR = r"C:\Users\Kroha\Documents\Auto-Blogging SaaS\devenv\Trading Bot\New Logic\Divided\3 models with a switcher"
NEURAL_NETWORKS_DIR = os.path.join(BASE_LOCAL_DIR, "Neural_Networks")
ENSEMBLE_MODELS_DIR = os.path.join(BASE_LOCAL_DIR, "Ensemble_Models")

os.makedirs(NEURAL_NETWORKS_DIR, exist_ok=True)
os.makedirs(ENSEMBLE_MODELS_DIR, exist_ok=True)

# === 3Ô∏è‚É£ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===
REQUIRED_PACKAGES = [
    "numpy", "pandas", "matplotlib", "scipy", "tensorflow==2.11.0", "tensorflow-addons",
    "scikit-learn", "imbalanced-learn", "xgboost", "catboost", "lightgbm", "joblib",
    "ta", "pandas-ta", "python-binance", "filterpy", "requests"
]

def install_packages():
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    for package in REQUIRED_PACKAGES:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "--no-cache-dir", package], check=True)
        except subprocess.CalledProcessError:
            print(f"‚ö† –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞: {package}")

install_packages()

# === 4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê GPU ===
def check_gpu():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU...")
    try:
        output = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if output.returncode == 0:
            print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(output.stdout)
        else:
            print("‚ö† GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –Ω–∞ CPU.")
    except FileNotFoundError:
        print("‚ö† nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

check_gpu()

# === 5Ô∏è‚É£ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø –ò –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ü–û–°–õ–ï –ö–ê–ñ–î–û–ô –ú–û–î–ï–õ–ò ===
MODELS_DIR = "/workspace/trading-models/neural_networks"
OUTPUT_DIR = "/workspace/trading-models/output/neural_networks"

MODELS = {
    "market_condition_classifier.py": "Market_Classifier",
    "bullish_neural_network.py": "Neural_Bullish",
    "bullish_ensemble.py": "Ensemble_Bullish",
    "flat_neural_network.py": "Neural_Flat",
    "flat_ensemble.py": "Ensemble_Flat",
    "bearish_neural_network.py": "Neural_Bearish",
    "bearish_ensemble.py": "Ensemble_Bearish"
}

def train_models():
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    for model_file, model_name in MODELS.items():
        model_path = os.path.join(MODELS_DIR, model_file)
        if os.path.exists(model_path):
            print(f"üü¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_file}")
            try:
                subprocess.run(["python3", model_path], check=True)

                # ‚úÖ –ü–û–°–õ–ï –û–ë–£–ß–ï–ù–ò–Ø –°–†–ê–ó–£ –°–ö–ê–ß–ò–í–ê–ï–ú –ú–û–î–ï–õ–¨
                print(f"üì• –ö–æ–ø–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å {model_name} –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É...")

                trained_model_path = os.path.join(OUTPUT_DIR, f"{model_name}.h5")
                
                if "Ensemble" in model_name:
                    local_model_path = os.path.join(ENSEMBLE_MODELS_DIR, f"{model_name}.h5")
                else:
                    local_model_path = os.path.join(NEURAL_NETWORKS_DIR, f"{model_name}.h5")

                if os.path.exists(trained_model_path):
                    subprocess.run(["cp", trained_model_path, local_model_path])
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {local_model_path}!")
                else:
                    print(f"‚ö† –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

            except subprocess.CalledProcessError:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {model_file}")
        else:
            print(f"‚ö† –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")

train_models()

# === 6Ô∏è‚É£ –û–°–¢–ê–ù–û–í–ö–ê –ü–û–î–ê –í RUNPOD –ü–û–°–õ–ï –û–ë–£–ß–ï–ù–ò–Ø ===
if RUNPOD_API_KEY:
    print("\nüîß –†–∞–±–æ—Ç–∞–µ–º —Å RunPod...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–≤
    try:
        response = requests.get(
            "https://api.runpod.io/v2/pod/list",
            headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
        )
        pods = response.json()
        if "pods" in pods and pods["pods"]:
            POD_ID = pods["pods"][0]["id"]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥ —Å ID: {POD_ID}")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥
            requests.post(
                f"https://api.runpod.io/v2/pod/{POD_ID}/stop",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

            # –£–¥–∞–ª—è–µ–º –ø–æ–¥
            requests.delete(
                f"https://api.runpod.io/v2/pod/{POD_ID}",
                headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"}
            )
            print(f"‚úÖ –ü–æ–¥ {POD_ID} —É–¥–∞–ª—ë–Ω.")
        else:
            print("‚ö† –ü–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ RunPod: {e}")

print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å–∫–∞—á–∞–Ω—ã, –ø–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
